import React, { useState } from "react";
import { Toaster } from "react-hot-toast";
import { Loader2 } from "lucide-react";

const ManageCategories = () => {
  const [categories, setCategories] = useState([]);
  const [newCategory, setNewCategory] = useState(null);
  const [editingCategory, setEditingCategory] = useState(null);
  const [loading, setLoading] = useState(false);
  const [selectedCategories, setSelectedCategories] = useState([]);

  const generateUniqueId = () => `${Date.now()}${Math.floor(Math.random() * 1000)}`;

  const handleAddCategory = () => {
    setNewCategory({ id: generateUniqueId(), name: "", cities: [""] });
  };

  const handleSaveCategory = () => {
    setCategories([...categories, newCategory]);
    setNewCategory(null);
  };

  const handleAddCity = (categoryIndex) => {
    if (newCategory) {
      const updatedCategories = [...categories];
      updatedCategories[categoryIndex] = {
        ...newCategory,
        cities: [...newCategory.cities, ""],
      };
      setCategories(updatedCategories);
    }
  };

  const handleDeleteCity = (categoryIndex, cityIndex) => {
    if (newCategory) {
      const updatedCities = [...newCategory.cities];
      updatedCities.splice(cityIndex, 1);
      const updatedCategories = [...categories];
      updatedCategories[categoryIndex] = {
        ...newCategory,
        cities: updatedCities,
      };
      setCategories(updatedCategories);
    }
  };

  const handleUpdateCategoryName = (categoryIndex, name) => {
    if (newCategory) {
      const updatedCategories = [...categories];
      updatedCategories[categoryIndex] = {
        ...newCategory,
        name: name,
      };
      setCategories(updatedCategories);
    }
  };

  const handleUpdateCity = (categoryIndex, cityIndex, cityName) => {
    if (newCategory) {
      const updatedCities = [...newCategory.cities];
      updatedCities[cityIndex] = cityName;
      const updatedCategories = [...categories];
      updatedCategories[categoryIndex] = {
        ...newCategory,
        cities: updatedCities,
      };
      setCategories(updatedCategories);
    }
  };

  const handleEditCategory = (categoryIndex) => {
    setEditingCategory(categoryIndex);
  };

  const handleCancelEditCategory = () => {
    setEditingCategory(null);
  };

  const handleSaveEditedCategory = (categoryIndex) => {
    // Implement the logic to save the edited category here
    // After saving, update the categories state
    setEditingCategory(null);
  };

  const handleDeleteCategories = () => {
    const updatedCategories = categories.filter(
      (category, index) => !selectedCategories.includes(index)
    );
    setCategories(updatedCategories);
    setSelectedCategories([]);
  };

  const toggleCategorySelection = (index) => {
    if (selectedCategories.includes(index)) {
      setSelectedCategories(selectedCategories.filter((i) => i !== index));
    } else {
      setSelectedCategories([...selectedCategories, index]);
    }
  };

  return (
    <div className="pt-16 flex flex-row w-full h-screen relative font-sans">
      <Toaster
        toastOptions={{
          className: "",
          style: {
            border: "1px solid #A9872D",
            backgroundColor: "#A9872D",
            padding: "16px",
            color: "white",
            fontWeight: "bold",
            marginTop: "65px",
            textAlign: "center",
          },
        }}
      />
      <div className="flex-1">
        <h1>Manage Categories</h1>

        <div>
          <h2>Categories</h2>
          <button onClick={handleAddCategory}>Add Category</button>
          <button onClick={handleDeleteCategories}>Delete Checked Categories</button>
          {categories.map((category, index) => (
            <div key={category.id}>
              <input
                type="checkbox"
                onChange={() => toggleCategorySelection(index)}
                checked={selectedCategories.includes(index)}
              />
              <div>
                {editingCategory === index ? (
                  // Edit mode
                  <div>
                    <h3>Edit Category</h3>
                    <label>
                      Category Name:
                      <input
                        type="text"
                        placeholder="Category Name"
                        value={category.name}
                        onChange={(e) => handleUpdateCategoryName(index, e.target.value)}
                      />
                    </label>
                    <h4>Cities:</h4>
                    {category.cities.map((city, cityIndex) => (
                      <div key={cityIndex}>
                        <label>
                          City Name:
                          <input
                            type="text"
                            placeholder
                            type="text"
                            placeholder="City Name"
                            value={city}
                            onChange={(e) => handleUpdateCity(index, cityIndex, e.target.value)}
                          />
                        </label>
                        <button onClick={() => handleDeleteCity(index, cityIndex)}>Delete City</button>
                      </div>
                    ))}
                    <button onClick={() => handleAddCity(index)}>Add City</button>
                    <button onClick={() => handleSaveEditedCategory(index)}>Save</button>
                    <button onClick={handleCancelEditCategory}>Cancel</button>
                  </div>
                ) : (
                  // Non-editable mode
                  <div>
                    <button onClick={() => handleEditCategory(index)}>Update Category</button>
                    <div>
                      <strong>Category Name: {category.name}</strong>
                    </div>
                    <div>
                      <strong>Cities:</strong>
                      {category.cities.map((city, cityIndex) => (
                        <div key={cityIndex}>{city}</div>
                      ))}
                    </div>
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>

        {newCategory && !editingCategory && (
          <div>
            <h3>Add New Category</h3>
            <label>
              Category Name:
              <input
                type="text"
                placeholder="Category Name"
                value={newCategory.name}
                onChange={(e) => handleUpdateCategoryName(-1, e.target.value)}
              />
            </label>
            <h4>Cities:</h4>
            {newCategory.cities.map((city, index) => (
              <div key={index}>
                <label>
                  City Name:
                  <input
                    type="text"
                    placeholder="City Name"
                    value={city}
                    onChange={(e) => handleUpdateCity(-1, index, e.target.value)}
                  />
                </label>
                <button onClick={() => handleDeleteCity(-1, index)}>Delete City</button>
              </div>
            ))}
            <button onClick={() => handleAddCity(-1)}>Add City</button>
            <button onClick={handleSaveCategory}>Save</button>
          </div>
        )}
      </div>

      {loading && (
        <Loader2
          size={100}
          className="animate-spin duration-200 absolute left-[50%] top-[50%]"
        />
      )}
    </div>
  );
};

export default ManageCategories;
